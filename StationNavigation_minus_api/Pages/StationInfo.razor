@page "/station-info/{StationId:int}"
@using StationNavigation.Services
@inject IStationInfoService StationInfoService
@inject NavigationManager Navigation
@using StationNavigation.Models

<PageTitle>역 정보 - 대전역</PageTitle>

<div class="station-info-container">
    <div class="station-info-header">
        <button class="back-btn" @onclick="GoBack">
            ← 뒤로
        </button>
        <h1>대전역 정보</h1>
    </div>

    @if (isLoading)
    {
        <div class="loading-message">역 정보를 불러오는 중입니다...</div>
    }
    else
    {
        <div class="station-info-content">
            <!-- 층수 선택 탭 -->
            <div class="floor-tabs">
                @foreach (var floor in floors.OrderBy(f => f.DisplayOrder))
                {
                    <button class="floor-btn @(selectedFloor?.Id == floor.Id ? "active" : "")" @onclick="() => SelectFloor(floor)">
                        @floor.Id
                    </button>
                }
            </div>

            <!-- 평면도 영역 -->
            <div class="floor-plan-area">
                @if (selectedFloor != null)
                {
                    <h3>@selectedFloor.FloorName 평면도</h3>
                    <div class="plan-placeholder">
                        <p>평면도 준비 중입니다</p>
                    </div>
                }
            </div>

            <!-- 시설 목록 -->
            <div class="facility-list-section">
                @if (selectedFloor != null)
                {
                    <h4>@selectedFloor.FloorName 주요 시설</h4>
                    <div class="facility-list">
                        @foreach (var facility in GetFacilitiesForSelectedFloor())
                        {
                            <button class="facility-item" @onclick="ShowDevelopmentAlert">
                                @facility.Name
                            </button>
                        }
                    </div>
                }
            </div>

            <!-- 길찾기 시작 버튼 -->
            <div class="start-navigation">
                <button class="start-btn" @onclick="StartNavigation">
                    역 내부 길찾기 시작 →
                </button>
            </div>
        </div>
    }

    <!-- 평면도 개발 중 안내 모달 -->
    @if (showDevelopmentAlert)
    {
        <div class="alert-modal" @onclick="HideDevelopmentAlert">
            <div class="modal-content" @onclick:stopPropagation="true">
                <h3>🚧 개발 중인 기능입니다 🚧</h3>
                <p>선택하신 시설의 위치를 평면도에 표시하는 기능은 현재 준비 중입니다. 잠시만 기다려주세요!</p>
                <button class="modal-close-btn" @onclick="HideDevelopmentAlert">확인</button>
            </div>
        </div>
    }
</div>


<style>
    .station-info-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: 'Noto Sans KR', sans-serif;
        color: white;
    }

    .station-info-header {
        position: relative; /* 자식 요소의 위치 기준으로 설정 */
        padding: 20px;
        text-align: center;
        height: 80px; /* 헤더 높이 고정 */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .back-btn {
        position: absolute; /* 헤더의 왼쪽 상단에 독립적으로 위치 */
        left: 20px;
        top: 50%;
        transform: translateY(-50%); /* 세로 중앙 정렬 */
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 20px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.3s ease;
    }

    .back-btn:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    .station-info-header h1 {
        font-size: 2rem;
        margin: 0 0 10px 0;
        font-weight: 700;
        padding-top: 10px;
    }

    .loading-message {
        text-align: center;
        padding: 50px;
        font-size: 1.2rem;
    }

    .station-info-content {
        max-width: 900px;
        margin: 0 auto;
        padding: 0 20px 40px;
    }

    .floor-tabs {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }

    .floor-btn {
        padding: 12px 25px;
        border: 2px solid rgba(255, 255, 255, 0.5);
        background: transparent;
        color: white;
        border-radius: 25px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .floor-btn:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .floor-btn.active {
        background: white;
        color: #667eea;
        border-color: white;
        font-weight: 700;
    }

    .floor-plan-area, .facility-list-section {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        color: #333;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .plan-placeholder {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 200px;
        background: #f0f0f0;
        border-radius: 10px;
        border: 2px dashed #ccc;
    }

    .plan-placeholder p {
        font-size: 1.2rem;
        color: #888;
        font-weight: 500;
    }
    
    h3, h4 {
        margin-top: 0;
        margin-bottom: 20px;
    }

    .facility-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
    }

    .facility-item {
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 10px;
        background: #fff;
        cursor: pointer;
        text-align: center;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.2s ease-in-out;
    }

    .facility-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        color: #4CAF50;
        border-color: #4CAF50;
    }

    .start-navigation {
        text-align: center;
        margin-top: 30px;
    }

    .start-btn {
        background: #4CAF50;
        color: white;
        border: none;
        padding: 15px 40px;
        border-radius: 30px;
        font-size: 1.2rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    
    .start-btn:hover {
        transform: scale(1.05);
        background: #45a049;
    }

    /* 모달 스타일 */
    .alert-modal {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: rgba(0, 0, 0, 0.6);
        display: flex; align-items: center; justify-content: center;
        z-index: 1000;
    }
    .modal-content {
        background: white; color: #333; padding: 30px; border-radius: 15px;
        text-align: center; max-width: 400px; margin: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }
    .modal-content h3 { font-size: 1.5rem; }
    .modal-content p { line-height: 1.6; }
    .modal-close-btn {
        background: #4CAF50; color: white; border: none;
        padding: 12px 30px; border-radius: 25px; cursor: pointer;
        font-size: 1rem; margin-top: 15px;
    }
</style>

@code {
    private List<StationFloor> floors = new();
    private List<StationFacility> facilities = new();
    private StationFloor? selectedFloor;
    private bool isLoading = true;
    private bool showDevelopmentAlert = false;

    [Parameter]
    public int StationId { get; set; }

protected override async Task OnInitializedAsync()
{
    isLoading = true;
    try
    {
        floors = await StationInfoService.GetFloorsByStationIdAsync(StationId);
        facilities = await StationInfoService.GetFacilitiesByStationIdAsync(StationId);
        
        if (floors.Any())
        {
            selectedFloor = floors.OrderBy(f => f.FloorLevel).First();
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"데이터 로딩 중 오류 발생: {ex.Message}");
    }
    finally
    {
        isLoading = false;
    }
}

private async Task SelectFloor(StationFloor floor)
{
    selectedFloor = floor;
}


private List<StationFacility> GetFacilitiesForSelectedFloor()
{
    if (selectedFloor == null)
    {
        return new List<StationFacility>();
    }
    return facilities.Where(f => f.FloorId == selectedFloor.Id).ToList();
}

    private void ShowDevelopmentAlert()
    {
        showDevelopmentAlert = true;
    }

    private void HideDevelopmentAlert()
    {
        showDevelopmentAlert = false;
    }

    private void GoBack()
    {
        // 이전 페이지(아마도 역 선택)로 이동합니다.
        Navigation.NavigateTo("/region"); // TODO: 실제 이전 페이지 경로로 수정해야 합니다.
    }

    private void StartNavigation()
    {
        // '길찾기 시작' 버튼을 누르면 출발지 선택 페이지로 이동합니다.
        Navigation.NavigateTo("/departure");
    }
}

