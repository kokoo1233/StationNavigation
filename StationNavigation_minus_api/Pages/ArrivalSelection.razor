@page "/arrival"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities
@using StationNavigation.Services
@inject ILocationService LocationService
@inject ISearchHistoryService HistoryService
@using StationNavigation.Models

<PageTitle>ÎèÑÏ∞©ÏßÄ ÏÑ†ÌÉù - ÎåÄÏ†ÑÏó≠ Í∏∏Ï∞æÍ∏∞</PageTitle>

<div class="arrival-container">
    <div class="arrival-header">
        <button class="back-btn" @onclick="GoBack">
            ‚Üê Îí§Î°ú
        </button>
        <h1>ÎèÑÏ∞©ÏßÄÎ•º ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî</h1>
        <p class="departure-info">Ï∂úÎ∞úÏßÄ: @GetLocationName(departureId)</p>
    </div>

<div class="arrival-content">
    <div class="category-list">
        @if (isLoading)
        {
            <div class="loading-message">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
        }
        else
        {
            @foreach (var category in categorizedLocations.OrderBy(c => c.Key))
            {
                <div class="category-item">
                    <h3 @onclick="() => ToggleCategory(category.Key)" class="category-title @(selectedCategory == category.Key ? "active" : "")">
                        @GetCategoryName(category.Key)  <span class="toggle-icon">@(selectedCategory == category.Key ? "‚ñº" : "‚ñ∂")</span>
                    </h3>
                    @if (selectedCategory == category.Key)
                    {
                        <div class="location-list">
                            @foreach (var location in category.Value)
                            {
                                <button class="location-btn @(IsDisabled(location.Id) ? "disabled" : "")" 
                                        @onclick="() => SelectLocation(location.Id)" 
                                        disabled="@IsDisabled(location.Id)">
                                    @location.Name
                                </button>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>
</div>
<style>
    .arrival-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: 'Noto Sans KR', sans-serif;
    }

    .arrival-header {
        padding: 20px;
        color: white;
        text-align: center;
    }

    .back-btn {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 20px;
        cursor: pointer;
        font-size: 1rem;
        margin-bottom: 20px;
        transition: background-color 0.3s ease;
    }

    .back-btn:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    .arrival-header h1 {
        font-size: 2rem;
        margin: 0 0 10px 0;
        font-weight: 700;
    }

    .departure-info {
        font-size: 1.1rem;
        opacity: 0.9;
        margin: 0;
        background: rgba(255, 255, 255, 0.2);
        padding: 10px 20px;
        border-radius: 20px;
        display: inline-block;
    }

    .arrival-content {
        padding: 0 20px 20px;
    }

    .category-list {
        max-width: 800px;
        margin: 0 auto;
    }

    .category-item {
        background: rgba(255, 255, 255, 0.95);
        margin-bottom: 15px;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .category-title {
        padding: 20px;
        margin: 0;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: space-between;
        font-size: 1.3rem;
        font-weight: 600;
        color: #333;
        transition: background-color 0.3s ease;
        user-select: none;
    }

    .category-title:hover {
        background: rgba(0, 0, 0, 0.05);
    }

    .category-title.active {
        background: linear-gradient(135deg, #4CAF50, #45a049);
        color: white;
    }

    .toggle-icon {
        font-size: 1rem;
    }

    .location-list {
        padding: 20px;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
    }

    .location-btn {
        padding: 15px 20px;
        border: 2px solid #e0e0e0;
        border-radius: 12px;
        background: white;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .location-btn:hover:not(.disabled) {
        border-color: #4CAF50;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        background: #f8fff8;
    }

    .location-btn.popular:not(.disabled) {
        border-color: #ff9800;
        background: linear-gradient(135deg, #fff3e0, #ffffff);
    }

    .location-btn.disabled {
        background: #f5f5f5;
        color: #999;
        border-color: #ddd;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .popular-badge {
        background: #ff9800;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .alert-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 30px;
        border-radius: 15px;
        text-align: center;
        max-width: 400px;
        margin: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    }

    .modal-content h3 {
        color: #333;
        margin-bottom: 15px;
        font-size: 1.5rem;
    }

    .modal-content p {
        color: #666;
        margin-bottom: 25px;
        line-height: 1.6;
    }

    .modal-close-btn {
        background: #4CAF50;
        color: white;
        border: none;
        padding: 12px 30px;
        border-radius: 25px;
        cursor: pointer;
        font-size: 1rem;
    }

    /* Î™®Î∞îÏùº Î∞òÏùëÌòï */
    @@media (max-width: 768px) {
        .location-list {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    // --- ÏÜçÏÑ±(Fields & Properties) ---
    private int selectedCategory = 1;
    private int departureId = 0;
    private bool showSameLocationAlert = false;
    private List<Location> allLocations = new();
    private Dictionary<int, List<Location>> categorizedLocations = new();
    private bool isLoading = true;

    // --- ÏÉùÎ™ÖÏ£ºÍ∏∞ Î©îÏÑúÎìú ---

    // üëá 'OnInitializedAsync'Ïùò Î∞òÌôò ÌÉÄÏûÖ Ïò§Î•ò(CS0508) Ìï¥Í≤∞
    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("departure", out var departureParam))
        {
            int.TryParse(departureParam, out departureId);
        }

        isLoading = true;
        allLocations = await LocationService.GetAllActiveLocationsAsync();
        categorizedLocations = allLocations
            .GroupBy(loc => loc.CategoryId)
            .ToDictionary(group => group.Key, group => group.ToList());
        isLoading = false;
    }

    // --- UI Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ Î©îÏÑúÎìú ---

    // üëá 'ToggleCategory'Í∞Ä ÏóÜÎã§Îäî Ïò§Î•ò(CS0103) Ìï¥Í≤∞
    private void ToggleCategory(int categoryId)
    {
        selectedCategory = selectedCategory == categoryId ? 0 : categoryId;
    }

    // üëá 'SelectLocation'Ïù¥ ÏóÜÎã§Îäî Ïò§Î•ò(CS0103) Ìï¥Í≤∞
    // üëá 'await'ÏùÑ ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï¥ async TaskÎ°ú Î≥ÄÍ≤Ω (CS4032 Ïò§Î•ò Ìï¥Í≤∞)
    private async Task SelectLocation(int locationId)
    {
        if (locationId == departureId)
        {
            showSameLocationAlert = true;
            return;
        }
        await HistoryService.AddHistoryAsync(departureId, locationId);
        Navigation.NavigateTo($"/result?departure={departureId}&arrival={locationId}");
    }

    private void HideAlert()
    {
        showSameLocationAlert = false;
    }

    // üëá 'GoBack'Ïù¥ ÏóÜÎã§Îäî Ïò§Î•ò(CS0103) Ìï¥Í≤∞
    private void GoBack()
    {
        Navigation.NavigateTo("/departure");
    }

    // --- ÎèÑÏö∞ÎØ∏(Helper) Î©îÏÑúÎìú ---

    // üëá 'IsDisabled'Í∞Ä ÏóÜÎã§Îäî Ïò§Î•ò(CS0103) Ìï¥Í≤∞
    private bool IsDisabled(int locationId)
    {
        return locationId == departureId;
    }
    
    // üëá 'GetLocationName'Ïù¥ ÏóÜÎã§Îäî Ïò§Î•ò(CS0103) Ìï¥Í≤∞
    private string GetLocationName(int id)
    {
        return allLocations.FirstOrDefault(loc => loc.Id == id)?.Name ?? "Ïïå Ïàò ÏóÜÏùå";
    }

    // üëá 'GetCategoryName'Ïù¥ ÏóÜÎã§Îäî Ïò§Î•ò(CS0103) Ìï¥Í≤∞
    private string GetCategoryName(int categoryId)
    {
        return categoryId switch
        {
            1 => "Í≥µÍ≥µÏãúÏÑ§",
            2 => "Í∞ÄÍ≤å",
            3 => "ÏûÖ/Ï∂úÍµ¨",
            _ => "Í∏∞ÌÉÄ"
        };
    }
}
